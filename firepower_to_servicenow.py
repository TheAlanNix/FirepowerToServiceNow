#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
This module is used to import Firepower syslog events into ServiceNow
"""

import json
import os
import re
import socketserver

import requests

from datetime import datetime
from dotenv import load_dotenv

load_dotenv()


class FirepowerSyslogHandler():
    """
    A class to parse Firepower syslog events.
    """

    __snow_tenant = None
    __snow_username = None
    __snow_password = None

    def __init__(self):
        self.__snow_tenant = os.getenv("SNOW_TENANT")
        self.__snow_username = os.getenv("SNOW_USERNAME")
        self.__snow_password = os.getenv("SNOW_PASSWORD")

    def _parse_event(self, data):
        """
        Parse the data using regex to extract the pertinent Firepower data.
        """

        # A Regex string for parsing Firepower IPS events generated by the FMC
        regex_string = r"([a-zA-z]{3}\s*\d{1,2}\s\d{2}:\d{2}:\d{2}) (\S*) SFIMS: \[([0-9:]*)\] \"([^\"]*)\"\s*" \
                       r"\[Impact: ([^\]]*)\]?\s*From \"([^\"]*)\" at ([a-zA-Z]{3}\s[a-zA-Z]{3}\s*\d{1,2}\s\d{2}:\d{2}:\d{2}\s\d{4}\s\S*)\s*" \
                       r"\[Classification: ([^\]]*)\]?\s*\[Priority: ([^\]]*)\]\s\{([^\}]*)\} ([0-9.]*):?([0-9]*)?\s?\(?([^\)]*)\)?->([0-9.]*)" \
                       r":?([0-9]*)?\s*\(?([^\)]*)\)?"

        # Try to parse the event, if this fails None is returned
        parsed_event = re.search(regex_string, data, re.MULTILINE)

        # If we properly parsed the event, do stuff
        if parsed_event:

            # Parse the current event time
            current_event_time = datetime.strptime(parsed_event.group(7), "%a %b %d %H:%M:%S %Y %Z")

            # Store the parsed data into a dict
            event_json = {
                "product": "Firepower",
                "fmc_hostname": parsed_event.group(2),
                "snort_id": parsed_event.group(3),
                "snort_name": parsed_event.group(4),
                "event_name": parsed_event.group(4),
                "event_details": f"{parsed_event.group(8)} event {parsed_event.group(4)} was detected by '{parsed_event.group(6)}'.",
                "impact_level": parsed_event.group(5),
                "sensor_name": parsed_event.group(6),
                "timestamp": current_event_time,
                "formatted_timestamp": current_event_time.strftime("%b %d, %Y %H:%M:%S UTC"),
                "classification": parsed_event.group(8),
                "priority": parsed_event.group(9),
                "protocol": parsed_event.group(10),
                "src_ip": parsed_event.group(11),
                "src_port": parsed_event.group(12),
                "src_geo": parsed_event.group(13),
                "dst_ip": parsed_event.group(14),
                "dst_port": parsed_event.group(15),
                "dst_geo": parsed_event.group(16),
            }

            return event_json

        else:
            return None

    def _submit_to_snow(self, event_json):
        """
        Submit the event to ServiceNow as an incident.
        """

        # Build the ServiceNow API URL
        snow_url = 'https://{}.service-now.com/api/now/table/incident'.format(self.__snow_tenant)

        # Specify headers for the ServiceNow POST request
        headers = {"Content-Type": "application/json", "Accept": "application/json"}

        data = {
            "category": "Network",
            "impact": 2,
            "urgency": 2,
            "short_description": "Stealtwatch Cloud Alert: {}".format(event_json['description']),
            "description": json.dumps(event_json, indent=4)
        }

        # Send the data to ServiceNow
        response = requests.post(snow_url, auth=(self.__snow_username, self.__snow_password), headers=headers, data=json.dumps(data))

        # Print logging
        print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:', response.json())

        return response.json()


class SyslogHandler(socketserver.BaseRequestHandler):
    """
    The RequestHandler class for Command Center Syslog events.
    """

    def handle(self):
        """
        Handle when a packet is received on the socket.
        """

        self.data = bytes.decode(self.request[0].strip())
        self.socket = self.request[1]

        print(f"{self.client_address[0]} sent the following: {self.data}")

        event_parser = FirepowerSyslogHandler()

        # Try to parse the event data
        event_json = event_parser._parse_event(self.data)

        # If the event was parsed
        if event_json:

            # Store the event
            event_parser._submit_to_snow(event_json)


if __name__ == "__main__":

    try:
        server = socketserver.UDPServer(("0.0.0.0", int(os.getenv("SYSLOG_PORT"))), SyslogHandler)
        server.serve_forever()
    except (IOError, SystemExit):
        raise
    except KeyboardInterrupt:
        print("Crtl+C Pressed. Shutting down.")
